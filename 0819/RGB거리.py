'''

다이나믹
.

1. 리스트 구조(배열 구조)
EX) DP[?][?][?]

2. 변인요인이 바뀔 때 계산이 어떻게 되어갈지
(현재 상태 <- 바로 직전 상태들 찾기)



=> 1 dp[몇 번째 집?][해당 집을 무슨 색]




풀이

마지막 집을 red라고 가정해놓고! 다른 것도 결과로 가정해놓고!  거꾸로 돌어가게 풀고 있네!

(현재 상태를 가정)

i가 레드면 i-1은 G,B

i가 그린이면 i-1은




전체적인 생각!
현재랑 과거 하나만 생각! 그 전에는 알아서 계산 되어 있겠지!! 그 마인드!!


'''




N = int(input())
li = [ list(map(int, input().split())) for _ in range(N) ]
# 각집을 각 색깔로 칠할때의 비용

dp = [[0] * 3 for _ in range(N)]
# dp리스트 생성
# dp[집 번호][색]

dp[0][0] = li[0][0]
dp[0][1] = li[0][1]
dp[0][2] = li[0][2]

for i in range(1, N):
    # i번 집에 대해 계산
    dp[i][0] = min(dp[i-1][1], dp[i-1][2]) + li[i][0]
    dp[i][1] = min(dp[i-1][0], dp[i-1][2]) + li[i][1]
    dp[i][2] = min(dp[i-1][0], dp[i-1][1]) + li[i][2]

# dp[N-1][0], dp[N-1][1], dp[N-1][2] 중에서 제일 작은 값 출력
print(min(dp[N-1]))
